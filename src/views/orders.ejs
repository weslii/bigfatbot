<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders Management - Novi</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="icon" href="/logo-icon copy.svg">
    <link href="/css/orders-dashboard.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <div class="header-left">
                <a href="/dashboard" class="logo-section">
                    <div class="logo-icon">
                        <i class="fas fa-box-open"></i>
        </div>
                    <div class="logo-text">
                        <span class="main-title" style="color: var(--primary-color); font-weight: 700; font-size: 1.5rem;">Orders Overview</span>
      </div>
                </a>
    </div>

            <div class="header-right">
                <a href="/dashboard" class="nav-link">Dashboard</a>
                <a href="/orders" class="nav-link active">Orders</a>
                <a href="/analytics" class="nav-link">Analytics</a>
                <a href="/groups" class="nav-link">Groups</a>
                <a href="/inventory" class="nav-link">Inventory</a>

                <button class="btn btn-icon" id="theme-toggle" aria-label="Toggle Theme">
                    <i class="fas fa-sun"></i>
                    <i class="fas fa-moon"></i>
            </button>
                <div class="dropdown">
                    <button class="btn btn-icon" id="profileDropdown">
                        <i class="fas fa-user"></i>
          </button>
                    <div class="dropdown-content" id="profileMenu">
                        <a href="/settings" class="dropdown-item"><i class="fas fa-cog"></i> Settings</a>
                        <form action="/logout" method="post" class="dropdown-item" style="padding: 0; margin: 0;">
                           <button type="submit" style="all: unset; cursor: pointer; display: flex; align-items: center; gap: 0.5rem; padding: 0.75rem 1rem; width: 100%;"><i class="fas fa-sign-out-alt"></i> Logout</button>
                        </form>
        </div>
            </div>
            <button class="btn btn-icon hamburger-menu" id="hamburgerMenu" aria-label="Toggle Menu">
                <i class="fas fa-bars"></i>
            </button>
          </div>
        </div>
    </header>

    <!-- Mobile Navigation Overlay -->
    <div class="mobile-nav-overlay" id="mobileNavOverlay">
        <div class="mobile-nav-content">
            <div class="mobile-nav-header">
                <span class="mobile-nav-title">Menu</span>
                <button class="btn btn-icon close-mobile-nav" id="closeMobileNav">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <nav class="mobile-nav-menu">
                <a href="/dashboard" class="mobile-nav-link">
                    <i class="fas fa-home"></i>
                    <span>Dashboard</span>
                </a>
                <a href="/orders" class="mobile-nav-link active">
                    <i class="fas fa-box"></i>
                    <span>Orders</span>
                </a>
                <a href="/analytics" class="mobile-nav-link">
                    <i class="fas fa-chart-line"></i>
                    <span>Analytics</span>
                </a>
                <a href="/groups" class="mobile-nav-link">
                    <i class="fas fa-users"></i>
                    <span>Groups</span>
                </a>
                <a href="/inventory" class="mobile-nav-link">
                    <i class="fas fa-boxes"></i>
                    <span>Inventory</span>
                </a>
            </nav>
            <div class="mobile-nav-actions">
                <button class="btn btn-icon mobile-theme-toggle" id="mobileThemeToggle" aria-label="Toggle Theme">
                    <i class="fas fa-sun"></i>
                    <i class="fas fa-moon"></i>
                </button>
                <div class="mobile-profile-section">
                    <a href="/settings" class="mobile-nav-link">
                        <i class="fas fa-cog"></i>
                        <span>Settings</span>
                    </a>
                    <form action="/logout" method="post" class="mobile-nav-link" style="padding: 0; margin: 0;">
                        <button type="submit" style="all: unset; cursor: pointer; display: flex; align-items: center; gap: 0.75rem; padding: 0.75rem 1rem; width: 100%; color: var(--text-primary);">
                            <i class="fas fa-sign-out-alt"></i>
                            <span>Logout</span>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <main class="main-content">
        <!-- Page Header -->
        <div class="page-header scroll-reveal">
            <div>
                <h1 class="page-title">Orders Overview</h1>
                <p class="page-subtitle">Manage and track all your business orders</p>
            </div>
            <div class="header-actions-right">
                <button class="btn btn-secondary" id="exportDropdown">
                    <i class="fas fa-download"></i> Export
                </button>
            </div>
        </div>
      
        <!-- Analytics Charts -->
        <div class="charts-grid">
            <div class="chart-card scroll-reveal">
                <div class="chart-container">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
            <div class="chart-card scroll-reveal">
                <div class="chart-container">
                    <canvas id="businessChart"></canvas>
                </div>
            </div>
          </div>
        <div class="content-card scroll-reveal trend-chart-card">
             <div class="card-content chart-container" style="min-height: 250px;">
                <canvas id="trendChart"></canvas>
        </div>
      </div>

      <!-- Filters -->
        <div class="content-card scroll-reveal">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-filter"></i> Filters
                </h3>
            </div>
            <div class="card-content">
                <form class="filters-form" id="filtersForm" onsubmit="handleFilterSubmit(event)">
            <input type="hidden" name="userId" value="<%= userId %>">
            
                    <div class="form-group">
                        <label class="form-label" for="businessFilter">Business</label>
                        <select class="form-select" name="business" id="businessFilter">
                <option value="">All Businesses</option>
                            <% businesses.forEach(function(biz) { %>
                                <option value="<%= biz.business_id %>" <%= selectedBusiness == biz.business_id ? 'selected' : '' %>>
                                    <%= biz.business_name %>
                  </option>
                <% }); %>
              </select>
            </div>

                    <div class="form-group">
                        <label class="form-label" for="statusFilter">Status</label>
                        <select class="form-select" name="status" id="statusFilter">
                            <option value="">All Statuses</option>
                            <option value="pending" <%= selectedStatus == 'pending' ? 'selected' : '' %>>Pending</option>
                            <option value="processing" <%= selectedStatus == 'processing' ? 'selected' : '' %>>Processing</option>
                            <option value="delivered" <%= selectedStatus == 'delivered' ? 'selected' : '' %>>Delivered</option>
                            <option value="cancelled" <%= selectedStatus == 'cancelled' ? 'selected' : '' %>>Cancelled</option>
              </select>
            </div>

                    <div class="form-group">
                        <label class="form-label" for="searchFilter">Search</label>
                        <input type="text" class="form-input" name="search" id="searchFilter"
                               placeholder="Customer name or order ID" value="<%= search || '' %>">
            </div>

                    <div class="form-group">
                        <label class="form-label" for="startDateFilter">Start Date</label>
                        <input type="date" class="form-input" name="startDate" id="startDateFilter"
                               value="<%= startDate ?? '' %>">
            </div>

                    <div class="form-group">
                        <label class="form-label" for="endDateFilter">End Date</label>
                        <input type="date" class="form-input" name="endDate" id="endDateFilter"
                               value="<%= endDate ?? '' %>">
            </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search"></i> Apply
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="clearFilters()">
                            <i class="fas fa-times"></i> Clear
                        </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Orders Table -->
        <div class="content-card scroll-reveal">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-box"></i> Orders (<span id="orders-count"><%= totalOrders %></span>)
                </h3>
                <div class="header-actions-right">
                    <form id="bulkActionsForm" class="d-flex align-items-center" onsubmit="return false;" style="gap:0.5rem;">
                        <div class="dropdown">
                            <button class="btn btn-secondary" id="bulkMenuBtn">
                                <i class="fas fa-check-square"></i> Bulk Actions
                            </button>
                            <div class="dropdown-content" id="bulkMenu" style="min-width:220px;">
                                <button class="dropdown-item" onclick="bulkSelectAll()"><i class="fas fa-list-check"></i> Select all on page</button>
                                <button class="dropdown-item" onclick="bulkClearSelection()"><i class="fas fa-xmark"></i> Clear selection</button>
                                <hr/>
                                <button class="dropdown-item" onclick="confirmBulkUpdate('processing')"><i class="fas fa-arrows-rotate"></i> Mark as Processing</button>
                                <button class="dropdown-item" onclick="confirmBulkUpdate('delivered')"><i class="fas fa-check"></i> Mark as Delivered</button>
                                <button class="dropdown-item" onclick="confirmBulkUpdate('cancelled')"><i class="fas fa-ban"></i> Mark as Cancelled</button>
                                <hr/>
                                <button class="dropdown-item" onclick="confirmBulkDelete()" style="color:var(--danger-color)"><i class="fas fa-trash"></i> Delete selected</button>
                            </div>
                        </div>
                    </form>
                    <form id="pageSizeForm" class="d-flex align-items-center">
                        <select class="form-select" style="width: auto;" name="pageSize">
              <option value="10" <%= pageSize == 10 ? 'selected' : '' %>>10 per page</option>
              <option value="25" <%= pageSize == 25 ? 'selected' : '' %>>25 per page</option>
              <option value="50" <%= pageSize == 50 ? 'selected' : '' %>>50 per page</option>
            </select>
                        <% for(let key in query) { %>
                            <% if (key !== 'pageSize' && key !== 'page') { %>
                                <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                            <% } %>
                        <% } %>
                    </form>
          </div>
        </div>
            <div class="card-content">
                <div class="table-container">
                    <table class="data-table">
              <thead>
                <tr>
                  <th style="width:36px;"><input type="checkbox" id="selectAllCheckbox" onclick="toggleSelectAll(this)"></th>
                  <th>Order ID</th>
                                <th>Business</th>
                  <th>Customer</th>
                  <th>Status</th>
                                <th>Created</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                            <% if (orders && orders.length) { %>
                                <% orders.forEach(function(order) { %>
                    <tr>
                        <td><input type="checkbox" class="row-select" data-id="<%= order.id %>"></td>
                                        <td><strong><%= order.order_id %></strong></td>
                                        <td><span class="business-badge"><%= order.business_name %></span></td>
                                        <td><%= order.customer_name %></td>
                      <td>
                                            <span class="status-badge <%= order.status %>"><%= order.status %></span>
                      </td>
                                        <td><%= new Date(order.created_at).toLocaleDateString() %></td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-sm btn-outline" onclick="viewOrder('<%= order.id %>')" title="View Order">
                            <i class="fas fa-eye"></i>
                          </button>
                                                <button class="btn btn-sm btn-outline" onclick="editOrder('<%= order.id %>')" title="Edit Order">
                            <i class="fas fa-edit"></i>
                          </button>
                                                <button class="btn btn-sm btn-outline btn-danger" onclick="deleteOrder('<%= order.id %>', '<%= order.order_id %>')" title="Delete Order">
                            <i class="fas fa-trash"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr>
                                    <td colspan="6" class="no-orders">
                                        <i class="fas fa-box-open"></i>
                                        <p>No orders found matching your criteria.</p>
                    </td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
      <!-- Pagination -->
      <% if (totalPages > 1) { %>
                    <div class="pagination">
                        <div class="pagination-info">
                            Showing <%= (page - 1) * pageSize + 1 %> to <%= Math.min(page * pageSize, totalOrders) %> of <%= totalOrders %> orders
          </div>
                        <nav class="pagination-nav">
                            <form method="GET" style="display: inline;">
                                <% for(let key in query) { %>
                                    <% if (key !== 'page') { %>
                                        <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                    <% } %>
                                <% } %>
                                <input type="hidden" name="page" value="<%= page - 1 %>">
                                <button type="submit" class="pagination-btn <%= page <= 1 ? 'disabled' : '' %>" <%= page <= 1 ? 'disabled' : '' %>>
                                <i class="fas fa-chevron-left"></i>
                                </button>
                            </form>
                            <% 
                                const maxPagesToShow = 5;
                                let startPage = Math.max(1, page - Math.floor(maxPagesToShow / 2));
                                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
                                if (endPage - startPage + 1 < maxPagesToShow) {
                                  startPage = Math.max(1, endPage - maxPagesToShow + 1);
                                }
                            %>
              <% if (startPage > 1) { %>
                                <form method="GET" style="display: inline;">
                                    <% for(let key in query) { %>
                                        <% if (key !== 'page') { %>
                                            <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                        <% } %>
                                    <% } %>
                                    <input type="hidden" name="page" value="1">
                                    <button type="submit" class="pagination-btn">1</button>
                                </form>
                                <% if (startPage > 2) { %><span class="pagination-btn disabled">...</span><% } %>
              <% } %>

                            <% for(let i = startPage; i <= endPage; i++) { %>
                                <form method="GET" style="display: inline;">
                                    <% for(let key in query) { %>
                                        <% if (key !== 'page') { %>
                                            <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                        <% } %>
                                    <% } %>
                                    <input type="hidden" name="page" value="<%= i %>">
                                    <button type="submit" class="pagination-btn <%= i === page ? 'active' : '' %>"><%= i %></button>
                                </form>
              <% } %>

              <% if (endPage < totalPages) { %>
                                <% if (endPage < totalPages - 1) { %><span class="pagination-btn disabled">...</span><% } %>
                                <form method="GET" style="display: inline;">
                                    <% for(let key in query) { %>
                                        <% if (key !== 'page') { %>
                                            <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                        <% } %>
                                    <% } %>
                                    <input type="hidden" name="page" value="<%= totalPages %>">
                                    <button type="submit" class="pagination-btn"><%= totalPages %></button>
                                </form>
                <% } %>
                            <form method="GET" style="display: inline;">
                                <% for(let key in query) { %>
                                    <% if (key !== 'page') { %>
                                        <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                    <% } %>
                                <% } %>
                                <input type="hidden" name="page" value="<%= page + 1 %>">
                                <button type="submit" class="pagination-btn <%= page >= totalPages ? 'disabled' : '' %>" <%= page >= totalPages ? 'disabled' : '' %>>
                                <i class="fas fa-chevron-right"></i>
                                </button>
                            </form>
          </nav>
        </div>
      <% } %>
    </div>
  </div>
    </main>

<!-- Order Details Modal -->
    <div id="orderModal" class="modal-overlay">
    <div class="modal-content">
      <div class="modal-header">
                <h3 class="modal-title">Order Details</h3>
                <button class="close-modal" onclick="closeModal('orderModal')">&times;</button>
            </div>
            <div class="modal-body" id="orderModalBody">
                <!-- Order details will be loaded here -->
    </div>
  </div>
</div>

<!-- Export Dropdown rendered at the end of body for robust stacking -->
<div class="dropdown-content" id="exportMenu" style="display:none;">
    <a href="/api/export/orders?format=csv&userId=<%= userId %>&<%= new URLSearchParams(query).toString() %>" class="dropdown-item">
        <i class="fas fa-file-csv"></i> Export as CSV
    </a>
    <a href="/api/export/orders?format=json&userId=<%= userId %>&<%= new URLSearchParams(query).toString() %>" class="dropdown-item">
        <i class="fas fa-file-code"></i> Export as JSON
    </a>
    <a href="/api/export/orders?format=pdf&userId=<%= userId %>&<%= new URLSearchParams(query).toString() %>" class="dropdown-item">
        <i class="fas fa-file-pdf"></i> Export as PDF
    </a>
</div>

<!-- Chart data for AJAX updates -->
<script id="chartDataScript" type="application/json"><%- JSON.stringify(chartData) %></script>

<script>
        // Dropdown functionality
        function setupDropdown(buttonId, menuId) {
            const dropdownBtn = document.getElementById(buttonId);
            const dropdownMenu = document.getElementById(menuId);

            if (dropdownBtn && dropdownMenu) {
                dropdownBtn.addEventListener('click', (event) => {
                    event.stopPropagation();
                    // Hide other dropdowns
                    document.querySelectorAll('.dropdown-content.show').forEach(menu => {
                        if (menu.id !== menuId) {
                            menu.classList.remove('show');
                        }
                    });
                    dropdownMenu.classList.toggle('show');
                });
            }
        }

        setupDropdown('profileDropdown', 'profileMenu');
        // Bulk menu dropdown
        setupDropdown('bulkMenuBtn', 'bulkMenu');
        // Bulk selection helpers
        function toggleSelectAll(master) {
            document.querySelectorAll('.row-select').forEach(cb => { cb.checked = master.checked; });
        }
        function bulkSelectAll() {
            document.querySelectorAll('.row-select').forEach(cb => { cb.checked = true; });
        }
        function bulkClearSelection() {
            document.querySelectorAll('.row-select').forEach(cb => { cb.checked = false; });
            const master = document.getElementById('selectAllCheckbox');
            if (master) master.checked = false;
        }
        function getSelectedOrderIds() {
            return Array.from(document.querySelectorAll('.row-select:checked')).map(cb => cb.getAttribute('data-id'));
        }
        async function confirmBulkUpdate(status) {
            const ids = getSelectedOrderIds();
            if (ids.length === 0) { showNotification('Select at least one order', 'error'); return; }
            const ok = confirm(`Apply status "${status}" to ${ids.length} orders?`);
            if (!ok) return;
            try {
                const resp = await fetch('/api/orders/bulk-update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderIds: ids, status, userId: '<%= userId %>' })
                });
                const data = await resp.json();
                if (!resp.ok || !data.success) throw new Error(data.error || 'Bulk update failed');
                showNotification(`Updated ${data.updatedCount} orders`, 'success');
                window.location.reload();
            } catch (e) { showNotification(e.message, 'error'); }
        }
        async function confirmBulkDelete() {
            const ids = getSelectedOrderIds();
            if (ids.length === 0) { showNotification('Select at least one order', 'error'); return; }
            const ok = confirm(`Delete ${ids.length} selected orders? This cannot be undone.`);
            if (!ok) return;
            try {
                const resp = await fetch('/api/orders/bulk-delete', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderIds: ids, userId: '<%= userId %>' })
                });
                const data = await resp.json();
                if (!resp.ok || !data.success) throw new Error(data.error || 'Bulk delete failed');
                showNotification(`Deleted ${data.deletedCount} orders`, 'success');
                window.location.reload();
            } catch (e) { showNotification(e.message, 'error'); }
        }

        // Hide dropdown when clicking outside
        window.addEventListener('click', (event) => {
            if (!event.target.closest('.dropdown')) {
                document.querySelectorAll('.dropdown-content.show').forEach(menu => {
                    menu.classList.remove('show');
                });
            }
        });

            // Update charts theme
        function updateChartThemes(theme) {
            const textColor = theme === 'dark' ? '#f8fafc' : '#1e293b';
            const gridColor = theme === 'dark' ? 'rgba(148, 163, 184, 0.2)' : 'rgba(226, 232, 240, 1)';
            
            // Update existing charts if they exist
            if (window.statusChart) {
                window.statusChart.options.plugins.title.color = textColor;
                window.statusChart.options.plugins.legend.labels.color = textColor;
                window.statusChart.update();
            }
            
            if (window.businessChart) {
                window.businessChart.options.plugins.title.color = textColor;
                window.businessChart.options.scales.y.ticks.color = textColor;
                window.businessChart.options.scales.x.ticks.color = textColor;
                window.businessChart.options.scales.y.grid.color = gridColor;
                window.businessChart.options.scales.x.grid.color = gridColor;
                window.businessChart.update();
            }
            
            if (window.trendChart) {
                window.trendChart.options.plugins.title.color = textColor;
                window.trendChart.options.scales.y.ticks.color = textColor;
                window.trendChart.options.scales.x.ticks.color = textColor;
                window.trendChart.options.scales.y.grid.color = gridColor;
                window.trendChart.options.scales.x.grid.color = gridColor;
                window.trendChart.update();
            }
        }

        // Theme toggle is handled by theme-utils.js

        // Modal functionality
        function openModal(modalId) { document.getElementById(modalId).classList.add('show'); }
        function closeModal(modalId) { document.getElementById(modalId).classList.remove('show'); }

        // Profile dropdown functionality
        const profileDropdown = document.getElementById('profileDropdown');
        const profileMenu = document.getElementById('profileMenu');
        const dropdownParent = profileDropdown.closest('.dropdown');
        profileDropdown.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdownParent.classList.toggle('active');
        });
        document.addEventListener('click', (e) => {
            if (!profileMenu.contains(e.target) && !profileDropdown.contains(e.target)) {
                dropdownParent.classList.remove('active');
            }
        });

        // Enhanced view order function
        async function viewOrder(orderId) {
            const modalBody = document.getElementById('orderModalBody');
            modalBody.innerHTML = '<p>Loading order details...</p>';
            openModal('orderModal');
            try {
                const response = await fetch(`/api/orders/${orderId}?userId=<%= userId %>`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                const order = data.order || data;
      
                let itemsHtml = 'No items listed.';
                if (order.items && order.items.trim()) {
                    // Items are stored as plain text, so display them directly
                    itemsHtml = `<div class="items-text">${order.items.replace(/\n/g, '<br>')}</div>`;
                }

                modalBody.innerHTML = `
                    <div class="order-details">
                    <h4>Order ID: ${order.order_id}</h4>
                        <p><strong>Business:</strong> ${order.business_name || 'N/A'}</p>
                        <p><strong>Customer Name:</strong> ${order.customer_name || 'N/A'}</p>
                        <p><strong>Customer Phone:</strong> ${order.customer_phone || 'N/A'}</p>
                        <p><strong>Delivery Address:</strong> ${order.address || 'N/A'}</p>
                    <p><strong>Status:</strong> <span class="status-badge ${order.status}">${order.status}</span></p>
                        <p><strong>Delivery Date:</strong> ${order.delivery_date ? new Date(order.delivery_date).toLocaleDateString() : 'Not set'}</p>
                        <p><strong>Delivery Person:</strong> ${order.delivery_person || 'Not assigned'}</p>
                    <hr>
                    <h5>Items</h5>
                    ${itemsHtml}
                    <hr>
                        ${order.notes ? `<p><strong>Notes:</strong> ${order.notes}</p><hr>` : ''}
                    <p><strong>Created:</strong> ${new Date(order.created_at).toLocaleString()}</p>
                        ${order.updated_at ? `<p><strong>Last Updated:</strong> ${new Date(order.updated_at).toLocaleString()}</p>` : ''}
                        ${order.updated_by ? `<p><strong>Updated By:</strong> ${order.updated_by}</p>` : ''}
                        <div class="btn-group" style="margin-top: 1rem;">
                            <button class="btn btn-primary" onclick="editOrder('${orderId}')">Edit Order</button>
                            <button class="btn btn-secondary" onclick="closeModal('orderModal')">Close</button>
                        </div>
                    </div>
                `;
    } catch (error) {
                console.error('Error loading order:', error);
                modalBody.innerHTML = `<p style="color: var(--danger-color)">Failed to load order details: ${error.message}</p>`;
            }
        }

        // Complete edit order function
        async function editOrder(orderId) {
            const modalBody = document.getElementById('orderModalBody');
            modalBody.innerHTML = '<p>Loading order for editing...</p>';
            openModal('orderModal');
            
            try {
                const response = await fetch(`/api/orders/${orderId}?userId=<%= userId %>`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                const order = data.order || data;

                // Items are stored as plain text, so no JSON parsing needed
                const itemsText = order.items || '';

                modalBody.innerHTML = `
                    <div class="order-edit">
                        <h4>Edit Order: ${order.order_id}</h4>
                        <form id="editOrderForm" onsubmit="saveOrderChanges(event, '${orderId}')">
                            <div class="form-group">
                                <label class="form-label">Customer Name</label>
                                <input type="text" class="form-input" name="customer_name" value="${order.customer_name || ''}" required>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Customer Phone</label>
                                <input type="tel" class="form-input" name="customer_phone" value="${order.customer_phone || ''}" required>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Delivery Address</label>
                                <textarea class="form-textarea" name="address" rows="3" required>${order.address || ''}</textarea>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Status</label>
                                <select class="form-select" name="status" required>
                                    <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Pending</option>
                                    <option value="processing" ${order.status === 'processing' ? 'selected' : ''}>Processing</option>
                                    <option value="delivered" ${order.status === 'delivered' ? 'selected' : ''}>Delivered</option>
                                    <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>Cancelled</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Delivery Date</label>
                                <input type="date" class="form-input" name="delivery_date" value="${order.delivery_date || ''}">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Delivery Person</label>
                                <input type="text" class="form-input" name="delivery_person" value="${order.delivery_person || ''}">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Items</label>
                                <textarea class="form-textarea" name="items" rows="4" placeholder="Enter items as plain text">${itemsText}</textarea>
                                <small style="color: var(--text-muted); font-size: 0.75rem; margin-top: 0.25rem; display: block;">
                                    Enter items as plain text (e.g., "2x Pizza Margherita, 1x Coke")
                                </small>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Notes</label>
                                <textarea class="form-textarea" name="notes" rows="3">${order.notes || ''}</textarea>
                            </div>
                            
                            <div class="btn-group" style="margin-top: 1rem;">
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                                <button type="button" class="btn btn-secondary" onclick="viewOrder('${orderId}')">Cancel</button>
                            </div>
                        </form>
                    </div>
                `;
            } catch (error) {
                console.error('Error loading order for editing:', error);
                modalBody.innerHTML = `<p style="color: var(--danger-color)">Failed to load order for editing: ${error.message}</p>`;
            }
        }

        // Save order changes
        async function saveOrderChanges(event, orderId) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
                
            const updateData = {
                customer_name: formData.get('customer_name'),
                customer_phone: formData.get('customer_phone'),
                address: formData.get('address'),
                status: formData.get('status'),
                delivery_date: formData.get('delivery_date') || null,
                delivery_person: formData.get('delivery_person') || null,
                notes: formData.get('notes') || null,
                items: formData.get('items'),
                updated_by: '<%= userId %>',
                userId: '<%= userId %>'
            };

            try {
                const response = await fetch(`/api/orders/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData)
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                
                // Show success message and reload the page to reflect changes
                const modalBody = document.getElementById('orderModalBody');
                modalBody.innerHTML = `
                    <div class="order-success">
                        <h4>✅ Order Updated Successfully!</h4>
                        <p>Order ${orderId} has been updated.</p>
                        <div class="btn-group" style="margin-top: 1rem;">
                            <button class="btn btn-primary" onclick="window.location.reload()">Refresh Page</button>
                            <button class="btn btn-secondary" onclick="closeModal('orderModal')">Close</button>
                        </div>
                    </div>
                `;
            } catch (error) {
                console.error('Error updating order:', error);
                const modalBody = document.getElementById('orderModalBody');
                modalBody.innerHTML = `
                    <div class="order-error">
                        <h4>❌ Error Updating Order</h4>
                        <p style="color: var(--danger-color)">Failed to update order: ${error.message}</p>
                        <div class="btn-group" style="margin-top: 1rem;">
                            <button class="btn btn-primary" onclick="editOrder('${orderId}')">Try Again</button>
                            <button class="btn btn-secondary" onclick="closeModal('orderModal')">Close</button>
                        </div>
                    </div>
                `;
            }
  }

        // Export dropdown functionality
        const exportDropdown = document.getElementById('exportDropdown');
        const exportMenu = document.getElementById('exportMenu');

        exportDropdown.addEventListener('click', (e) => {
            e.stopPropagation();
            const rect = exportDropdown.getBoundingClientRect();
            exportMenu.style.display = 'block';
            exportMenu.style.position = 'fixed';
            exportMenu.style.left = rect.left + 'px';
            exportMenu.style.top = (rect.bottom + 4) + 'px';
            exportMenu.style.zIndex = 9999;
        });

        document.addEventListener('click', (e) => {
            if (!exportMenu.contains(e.target) && e.target !== exportDropdown) {
                exportMenu.style.display = 'none';
            }
        });

        window.addEventListener('resize', () => {
            exportMenu.style.display = 'none';
        });

        // Scroll reveal functionality
        function initScrollReveal() {
            const scrollRevealElements = document.querySelectorAll('.scroll-reveal');
            
            // If no elements found, nothing to do
            if (scrollRevealElements.length === 0) return;
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            });
            
            scrollRevealElements.forEach(element => {
                observer.observe(element);
                
                // Immediately make elements visible if they're already in the viewport
                const rect = element.getBoundingClientRect();
                if (rect.top < window.innerHeight && rect.bottom > 0) {
                    element.classList.add('visible');
                }
            });
            
            // Fallback: If IntersectionObserver is not supported, make all elements visible
            if (!window.IntersectionObserver) {
                scrollRevealElements.forEach(element => {
                    element.classList.add('visible');
                });
            }
        }

        // Parse chart data from backend
        const chartData = JSON.parse(document.getElementById('chartDataScript').textContent || '{}');
        // Prepare status chart data
        const statusLabels = ['pending', 'processing', 'delivered', 'cancelled'];
        const statusCountsMap = {};
        (chartData.statusCounts || []).forEach(row => { statusCountsMap[row.status] = Number(row.count); });
        const statusData = statusLabels.map(label => statusCountsMap[label] || 0);
        // Prepare business chart data (always all businesses)
        const businessLabels = (chartData.ordersByBusiness || []).map(row => row.business_name);
        const businessData = (chartData.ordersByBusiness || []).map(row => Number(row.count));
        // Prepare trend chart data (filtered)
        const trendLabelsRaw = (chartData.recentTrends || []).map(row => row.date);
        const trendLabels = trendLabelsRaw.map(dateStr => {
            const d = new Date(dateStr);
            return d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        });
        const trendData = (chartData.recentTrends || []).map(row => Number(row.count));

        // Chart initialization
        function initCharts() {
            // Status Distribution Chart
            const statusCtx = document.getElementById('statusChart');
            if (statusCtx) {
                window.statusChart = new Chart(statusCtx, {
                    type: 'doughnut',
                    data: {
                        labels: statusLabels.map(l => l.charAt(0).toUpperCase() + l.slice(1)),
                        datasets: [{
                            data: statusData,
                            backgroundColor: [
                                'rgba(245, 158, 11, 0.8)',
                                'rgba(59, 130, 246, 0.8)',
                                'rgba(16, 185, 129, 0.8)',
                                'rgba(239, 68, 68, 0.8)'
                            ],
                            borderColor: [
                                'rgba(245, 158, 11, 1)',
                                'rgba(59, 130, 246, 1)',
                                'rgba(16, 185, 129, 1)',
                                'rgba(239, 68, 68, 1)'
                            ],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                                    padding: 15,
                                    usePointStyle: true,
                                    font: {
                                        size: window.innerWidth < 768 ? 11 : 12
                                    }
                                }
                            },
                            title: {
                                display: true,
                                text: 'Order Status Distribution',
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                                font: {
                                    size: window.innerWidth < 768 ? 14 : 16,
                                    weight: 'bold'
                                }
                            }
                        }
                    }
                });
            }

            // Business Performance Chart (not filtered)
            const businessCtx = document.getElementById('businessChart');
            if (businessCtx) {
                window.businessChart = new Chart(businessCtx, {
                    type: 'bar',
                    data: {
                        labels: businessLabels,
                        datasets: [{
                            label: 'Orders',
                            data: businessData,
                            backgroundColor: 'rgba(16, 185, 129, 0.8)',
                            borderColor: 'rgba(16, 185, 129, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: {
                                display: true,
                                text: 'Orders by Business',
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                                font: { 
                                    size: window.innerWidth < 768 ? 14 : 16, 
                                    weight: 'bold' 
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { 
                                    color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary'),
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                },
                                grid: { color: getComputedStyle(document.documentElement).getPropertyValue('--border-color') }
                            },
                            x: {
                                ticks: { 
                                    color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary'),
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                },
                                grid: { color: getComputedStyle(document.documentElement).getPropertyValue('--border-color') }
                            }
                        }
                    }
                });
            }

            // Trend Chart
            const trendCtx = document.getElementById('trendChart');
            if (trendCtx) {
                window.trendChart = new Chart(trendCtx, {
                    type: 'line',
                    data: {
                        labels: trendLabels,
                        datasets: [{
                            label: 'Orders',
                            data: trendData,
                            borderColor: 'rgba(16, 185, 129, 1)',
                            backgroundColor: 'rgba(16, 185, 129, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: {
                                display: true,
                                text: 'Order Trends (Last 7 Days)',
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                                font: { 
                                    size: window.innerWidth < 768 ? 14 : 16, 
                                    weight: 'bold' 
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { 
                                    color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary'),
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                },
                                grid: { color: getComputedStyle(document.documentElement).getPropertyValue('--border-color') }
                            },
                            x: {
                                ticks: { 
                                    color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary'),
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                },
                                grid: { color: getComputedStyle(document.documentElement).getPropertyValue('--border-color') }
                            }
                        }
                    }
                });
            }
        }

        // Initialize charts when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize theme manager first
            if (window.themeManager) {
                const currentTheme = window.themeManager.getCurrentTheme();
                // Update charts theme
                updateChartThemes(currentTheme);
            }
            
            // Initialize scroll reveal
            initScrollReveal();
            
            // Initialize charts
            initCharts();

            // Initialize AJAX functionality
            initializePaginationListeners();
            initializePageSizeListener();

            // Auto-open edit modal if ?edit=ORDER_ID is present
            const params = new URLSearchParams(window.location.search);
            const editId = params.get('edit');
            if (editId) {
                editOrder(editId);
            }
        });

        // Fallback: If DOMContentLoaded doesn't fire, try on window load
        window.addEventListener('load', function() {
            const scrollRevealElements = document.querySelectorAll('.scroll-reveal:not(.visible)');
            if (scrollRevealElements.length > 0) {
                // If elements are still not visible, make them visible as a last resort
                scrollRevealElements.forEach(element => {
                    element.classList.add('visible');
                });
            }
        });

        // Clear filters function
        function clearFilters() {
            // Redirect to orders page without any query parameters
            window.location.href = '/orders';
        }

        // AJAX filtering and pagination
        function loadOrders(params = {}) {
            const url = new URL('/orders', window.location.origin);
            
            // Add current parameters
            Object.keys(params).forEach(key => {
                if (params[key] !== '' && params[key] !== null && params[key] !== undefined) {
                    url.searchParams.set(key, params[key]);
                }
            });

            // Show loading state
            const tableBody = document.querySelector('.data-table tbody');
            const tableContainer = document.querySelector('.table-container');
            
            if (tableBody) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="loading-orders">
                            <div style="text-align: center; padding: 2rem;">
                                <i class="fas fa-spinner fa-spin" style="font-size: 1.5rem; color: var(--primary-color);"></i>
                                <p style="margin-top: 1rem; color: var(--text-secondary);">Loading orders...</p>
                            </div>
                        </td>
                    </tr>
                `;
            }

            // Fetch orders via AJAX
            fetch(url.toString())
                .then(response => response.text())
                .then(html => {
                    // Create a temporary div to parse the HTML
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = html;
                    
                    // Extract the table body content
                    const newTableBody = tempDiv.querySelector('.data-table tbody');
                    const newPagination = tempDiv.querySelector('.pagination');
                    const newOrderCount = tempDiv.querySelector('#orders-count');
                    
                    // Update the table
                    if (newTableBody && tableBody) {
                        tableBody.innerHTML = newTableBody.innerHTML;
                    }
                    
                    // Update pagination
                    const currentPagination = document.querySelector('.pagination');
                    if (newPagination && currentPagination) {
                        currentPagination.innerHTML = newPagination.innerHTML;
                    }
                    
                    // Update order count
                    const currentOrderCount = document.querySelector('#orders-count');
                    if (newOrderCount && currentOrderCount) {
                        currentOrderCount.textContent = newOrderCount.textContent;
                    }
                    
                    // Update URL without page refresh
                    window.history.pushState({}, '', url.toString());
                    
                    // Reinitialize any necessary event listeners
                    initializePaginationListeners();
                })
                .catch(error => {
                    console.error('Error loading orders:', error);
                    if (tableBody) {
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="error-loading">
                                    <div style="text-align: center; padding: 2rem; color: var(--danger-color);">
                                        <i class="fas fa-exclamation-triangle" style="font-size: 1.5rem;"></i>
                                        <p style="margin-top: 1rem;">Error loading orders. Please try again.</p>
                                    </div>
                                </td>
                            </tr>
                        `;
                    }
                });
        }

        // Handle form submission with AJAX
        function handleFilterSubmit(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const params = {};
            
            // Convert FormData to object
            for (let [key, value] of formData.entries()) {
                if (value !== '') {
                    params[key] = value;
                }
            }
            
            // Reset to page 1 when filtering
            params.page = 1;
            
            loadOrders(params);
        }

        // Initialize pagination event listeners
        function initializePaginationListeners() {
            const paginationForms = document.querySelectorAll('.pagination-nav form');
            paginationForms.forEach(form => {
                form.addEventListener('submit', function(event) {
                    event.preventDefault();
                    
                    const formData = new FormData(this);
                    const params = {};
                    
                    // Get current filter values
                    const filterForm = document.getElementById('filtersForm');
                    const filterFormData = new FormData(filterForm);
                    
                    // Add current filters
                    for (let [key, value] of filterFormData.entries()) {
                        if (value !== '') {
                            params[key] = value;
                        }
                    }
                    
                    // Add pagination parameters
                    for (let [key, value] of formData.entries()) {
                        params[key] = value;
                    }
                    
                    loadOrders(params);
                });
            });
        }

        // Initialize page size form listener
        function initializePageSizeListener() {
            const pageSizeForm = document.getElementById('pageSizeForm');
            if (pageSizeForm) {
                pageSizeForm.addEventListener('change', function(event) {
                    event.preventDefault();
                    
                    const formData = new FormData(this);
                    const params = {};
                    
                    // Get current filter values
                    const filterForm = document.getElementById('filtersForm');
                    const filterFormData = new FormData(filterForm);
                    
                    // Add current filters
                    for (let [key, value] of filterFormData.entries()) {
                        if (value !== '') {
                            params[key] = value;
                        }
                    }
                    
                    // Add page size parameter
                    for (let [key, value] of formData.entries()) {
                        params[key] = value;
                    }
                    
                    // Reset to page 1 when changing page size
                    params.page = 1;
                    
                    loadOrders(params);
                });
            }
        }

        // Delete order functionality
        let orderToDelete = null;

        function deleteOrder(orderId, orderNumber) {
            orderToDelete = orderId;
            document.getElementById('deleteOrderId').textContent = orderNumber;
            document.getElementById('deleteModal').classList.add('show');
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.remove('show');
            orderToDelete = null;
            
            // Reset delete button state
            const deleteBtn = document.querySelector('#deleteModal .btn-danger');
            if (deleteBtn) {
                deleteBtn.innerHTML = '<i class="fas fa-trash"></i> Delete Order';
                deleteBtn.disabled = false;
            }
        }

        function confirmDelete() {
            if (!orderToDelete) return;

            // Show loading state
            const deleteBtn = document.querySelector('#deleteModal .btn-danger');
            if (!deleteBtn) return;
            
            deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
            deleteBtn.disabled = true;

            // Send delete request
            fetch(`/api/orders/${orderToDelete}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userId: '<%= userId %>'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close modal (this will reset the button state)
                    closeDeleteModal();
                    
                    // Show success message
                    showNotification('Order deleted successfully', 'success');
                    
                    // Reload current page to reflect changes
                    const currentParams = new URLSearchParams(window.location.search);
                    loadOrders(Object.fromEntries(currentParams));
                } else {
                    throw new Error(data.error || 'Failed to delete order');
                }
            })
            .catch(error => {
                console.error('Error deleting order:', error);
                showNotification('Failed to delete order: ' + error.message, 'error');
                
                // Reset button state
                deleteBtn.innerHTML = '<i class="fas fa-trash"></i> Delete Order';
                deleteBtn.disabled = false;
            });
        }

        // Notification system
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
                <button class="notification-close" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            // Add to page
            document.body.appendChild(notification);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        // Close modal when clicking outside
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('deleteModal');
            if (event.target === modal) {
                closeDeleteModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeDeleteModal();
            }
        });

        // Add this function globally to allow manual updates if needed
        function updateOrdersCount(newCount) {
            const countSpan = document.getElementById('orders-count');
            if (countSpan) {
                countSpan.textContent = newCount;
            }
        }

        // Mobile navigation functionality
        const hamburgerMenu = document.getElementById('hamburgerMenu');
        const mobileNavOverlay = document.getElementById('mobileNavOverlay');
        const closeMobileNav = document.getElementById('closeMobileNav');
        const mobileThemeToggle = document.getElementById('mobileThemeToggle');

        // Open mobile menu
        hamburgerMenu.addEventListener('click', function() {
            mobileNavOverlay.classList.add('show');
            document.body.style.overflow = 'hidden';
        });

        // Close mobile menu
        function closeMobileMenu() {
            mobileNavOverlay.classList.remove('show');
            document.body.style.overflow = '';
        }

        closeMobileNav.addEventListener('click', closeMobileMenu);

        // Close mobile menu when clicking outside
        mobileNavOverlay.addEventListener('click', function(e) {
            if (e.target === mobileNavOverlay) {
                closeMobileMenu();
            }
        });

        // Close mobile menu with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && mobileNavOverlay.classList.contains('show')) {
                closeMobileMenu();
            }
        });

        // Mobile theme toggle
        mobileThemeToggle.addEventListener('click', function() {
            if (window.themeManager) {
                window.themeManager.toggleTheme();
            }
        });

        // Close mobile menu when clicking on navigation links
        const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
        mobileNavLinks.forEach(link => {
            link.addEventListener('click', function() {
                if (!this.classList.contains('mobile-theme-toggle')) {
                    closeMobileMenu();
                }
            });
        });
    </script>

    <!-- Delete Confirmation Modal -->
    <div class="modal-overlay" id="deleteModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">
                    <i class="fas fa-exclamation-triangle" style="color: var(--danger-color);"></i>
                    Confirm Delete
                </h3>
                <button class="close-modal" onclick="closeDeleteModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete order <strong id="deleteOrderId"></strong>?</p>
                <p style="color: var(--text-secondary); font-size: 0.9rem; margin-top: 1rem;">
                    This action cannot be undone. The order and all its associated data will be permanently removed.
                </p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeDeleteModal()">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button class="btn btn-danger" onclick="confirmDelete()">
                    <i class="fas fa-trash"></i> Delete Order
                </button>
            </div>
        </div>
    </div>

    <script src="/js/theme-utils.js"></script>
</body>
</html> 