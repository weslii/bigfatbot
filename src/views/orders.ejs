<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders Management - WhatsApp Delivery Bot</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/orders-dashboard.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <div class="header-left">
                <a href="/dashboard" class="logo-section">
                    <div class="logo-icon">
                        <i class="fas fa-box-open"></i>
        </div>
                    <div class="logo-text">
                        <span class="main-title" style="color: var(--primary-color); font-weight: 700; font-size: 1.5rem;">Orders Overview</span>
      </div>
                </a>
    </div>

            <div class="header-right">
                <a href="/dashboard" class="nav-link">Dashboard</a>
                <a href="/orders" class="nav-link active">Orders</a>
                <a href="/groups" class="nav-link">Groups</a>

                <button class="btn btn-icon" id="theme-toggle" aria-label="Toggle Theme">
                    <i class="fas fa-sun"></i>
                    <i class="fas fa-moon" style="display: none;"></i>
            </button>
                <div class="dropdown">
                    <button class="btn btn-icon" id="profileDropdown">
                        <i class="fas fa-user"></i>
          </button>
                    <div class="dropdown-content" id="profileMenu">
                        <a href="/settings" class="dropdown-item"><i class="fas fa-cog"></i> Settings</a>
                        <form action="/logout" method="post" class="dropdown-item" style="padding: 0; margin: 0;">
                           <button type="submit" style="all: unset; cursor: pointer; display: flex; align-items: center; gap: 0.5rem; padding: 0.75rem 1rem; width: 100%;"><i class="fas fa-sign-out-alt"></i> Logout</button>
                        </form>
        </div>
            </div>
          </div>
        </div>
    </header>

    <main class="main-content">
        <!-- Page Header -->
        <div class="page-header scroll-reveal">
            <div>
                <h1 class="page-title">Orders Overview</h1>
                <p class="page-subtitle">Manage and track all your business orders</p>
            </div>
            <div class="header-actions-right">
                <button class="btn btn-secondary" id="exportDropdown">
                    <i class="fas fa-download"></i> Export
                </button>
            </div>
        </div>
      
        <!-- Analytics Charts -->
        <div class="charts-grid">
            <div class="chart-card scroll-reveal">
                <div class="chart-container">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
            <div class="chart-card scroll-reveal">
                <div class="chart-container">
                    <canvas id="businessChart"></canvas>
                </div>
            </div>
          </div>
        <div class="content-card scroll-reveal trend-chart-card">
             <div class="card-content chart-container" style="min-height: 250px;">
                <canvas id="trendChart"></canvas>
        </div>
      </div>

      <!-- Filters -->
        <div class="content-card scroll-reveal">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-filter"></i> Filters
                </h3>
            </div>
            <div class="card-content">
                <form class="filters-form" id="filtersForm">
            <input type="hidden" name="userId" value="<%= userId %>">
            
                    <div class="form-group">
                        <label class="form-label" for="businessFilter">Business</label>
                        <select class="form-select" name="business" id="businessFilter">
                <option value="">All Businesses</option>
                            <% businesses.forEach(function(biz) { %>
                                <option value="<%= biz.business_id %>" <%= selectedBusiness == biz.business_id ? 'selected' : '' %>>
                                    <%= biz.business_name %>
                  </option>
                <% }); %>
              </select>
            </div>

                    <div class="form-group">
                        <label class="form-label" for="statusFilter">Status</label>
                        <select class="form-select" name="status" id="statusFilter">
                            <option value="">All Statuses</option>
                            <option value="pending" <%= selectedStatus == 'pending' ? 'selected' : '' %>>Pending</option>
                            <option value="processing" <%= selectedStatus == 'processing' ? 'selected' : '' %>>Processing</option>
                            <option value="delivered" <%= selectedStatus == 'delivered' ? 'selected' : '' %>>Delivered</option>
                            <option value="cancelled" <%= selectedStatus == 'cancelled' ? 'selected' : '' %>>Cancelled</option>
              </select>
            </div>

                    <div class="form-group">
                        <label class="form-label" for="searchFilter">Search</label>
                        <input type="text" class="form-input" name="search" id="searchFilter"
                               placeholder="Customer name or order ID" value="<%= search || '' %>">
            </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search"></i> Apply
                        </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Orders Table -->
        <div class="content-card scroll-reveal">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-box"></i> Orders (<%= totalOrders %>)
                </h3>
                <div class="header-actions-right">
                    <form id="pageSizeForm" class="d-flex align-items-center">
                        <select class="form-select" style="width: auto;" name="pageSize" onchange="document.getElementById('pageSizeForm').submit()">
              <option value="10" <%= pageSize == 10 ? 'selected' : '' %>>10 per page</option>
              <option value="25" <%= pageSize == 25 ? 'selected' : '' %>>25 per page</option>
              <option value="50" <%= pageSize == 50 ? 'selected' : '' %>>50 per page</option>
            </select>
                        <% for(let key in query) { %>
                            <% if (key !== 'pageSize' && key !== 'page') { %>
                                <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                            <% } %>
                        <% } %>
                    </form>
          </div>
        </div>
            <div class="card-content">
                <div class="table-container">
                    <table class="data-table">
              <thead>
                <tr>
                  <th>Order ID</th>
                                <th>Business</th>
                  <th>Customer</th>
                  <th>Status</th>
                                <th>Created</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                            <% if (orders && orders.length) { %>
                                <% orders.forEach(function(order) { %>
                    <tr>
                                        <td><strong><%= order.order_id %></strong></td>
                                        <td><span class="business-badge"><%= order.business_name %></span></td>
                                        <td><%= order.customer_name %></td>
                      <td>
                                            <span class="status-badge <%= order.status %>"><%= order.status %></span>
                      </td>
                                        <td><%= new Date(order.created_at).toLocaleDateString() %></td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-sm btn-outline" onclick="viewOrder('<%= order.id %>')">
                            <i class="fas fa-eye"></i>
                          </button>
                                                <button class="btn btn-sm btn-outline" onclick="editOrder('<%= order.id %>')">
                            <i class="fas fa-edit"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr>
                                    <td colspan="6" class="no-orders">
                                        <i class="fas fa-box-open"></i>
                                        <p>No orders found matching your criteria.</p>
                    </td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
      <!-- Pagination -->
      <% if (totalPages > 1) { %>
                    <div class="pagination">
                        <div class="pagination-info">
                            Showing <%= (page - 1) * pageSize + 1 %> to <%= Math.min(page * pageSize, totalOrders) %> of <%= totalOrders %> orders
          </div>
                        <nav class="pagination-nav">
                            <form method="GET" style="display: inline;">
                                <% for(let key in query) { %>
                                    <% if (key !== 'page') { %>
                                        <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                    <% } %>
                                <% } %>
                                <input type="hidden" name="page" value="<%= page - 1 %>">
                                <button type="submit" class="pagination-btn <%= page <= 1 ? 'disabled' : '' %>" <%= page <= 1 ? 'disabled' : '' %>>
                                <i class="fas fa-chevron-left"></i>
                                </button>
                            </form>
                            <% 
                                const maxPagesToShow = 5;
                                let startPage = Math.max(1, page - Math.floor(maxPagesToShow / 2));
                                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
                                if (endPage - startPage + 1 < maxPagesToShow) {
                                  startPage = Math.max(1, endPage - maxPagesToShow + 1);
                                }
                            %>
              <% if (startPage > 1) { %>
                                <form method="GET" style="display: inline;">
                                    <% for(let key in query) { %>
                                        <% if (key !== 'page') { %>
                                            <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                        <% } %>
                                    <% } %>
                                    <input type="hidden" name="page" value="1">
                                    <button type="submit" class="pagination-btn">1</button>
                                </form>
                                <% if (startPage > 2) { %><span class="pagination-btn disabled">...</span><% } %>
              <% } %>

                            <% for(let i = startPage; i <= endPage; i++) { %>
                                <form method="GET" style="display: inline;">
                                    <% for(let key in query) { %>
                                        <% if (key !== 'page') { %>
                                            <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                        <% } %>
                                    <% } %>
                                    <input type="hidden" name="page" value="<%= i %>">
                                    <button type="submit" class="pagination-btn <%= i === page ? 'active' : '' %>"><%= i %></button>
                                </form>
              <% } %>

              <% if (endPage < totalPages) { %>
                                <% if (endPage < totalPages - 1) { %><span class="pagination-btn disabled">...</span><% } %>
                                <form method="GET" style="display: inline;">
                                    <% for(let key in query) { %>
                                        <% if (key !== 'page') { %>
                                            <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                        <% } %>
                                    <% } %>
                                    <input type="hidden" name="page" value="<%= totalPages %>">
                                    <button type="submit" class="pagination-btn"><%= totalPages %></button>
                                </form>
                <% } %>
                            <form method="GET" style="display: inline;">
                                <% for(let key in query) { %>
                                    <% if (key !== 'page') { %>
                                        <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                                    <% } %>
                                <% } %>
                                <input type="hidden" name="page" value="<%= page + 1 %>">
                                <button type="submit" class="pagination-btn <%= page >= totalPages ? 'disabled' : '' %>" <%= page >= totalPages ? 'disabled' : '' %>>
                                <i class="fas fa-chevron-right"></i>
                                </button>
                            </form>
          </nav>
        </div>
      <% } %>
    </div>
  </div>
    </main>

<!-- Order Details Modal -->
    <div id="orderModal" class="modal-overlay">
    <div class="modal-content">
      <div class="modal-header">
                <h3 class="modal-title">Order Details</h3>
                <button class="close-modal" onclick="closeModal('orderModal')">&times;</button>
            </div>
            <div class="modal-body" id="orderModalBody">
                <!-- Order details will be loaded here -->
    </div>
  </div>
</div>

<!-- Export Dropdown rendered at the end of body for robust stacking -->
<div class="dropdown-content" id="exportMenu" style="display:none;">
    <a href="/api/export/orders?format=csv&userId=<%= userId %>&<%= new URLSearchParams(query).toString() %>" class="dropdown-item">
        <i class="fas fa-file-csv"></i> Export as CSV
    </a>
    <a href="/api/export/orders?format=json&userId=<%= userId %>&<%= new URLSearchParams(query).toString() %>" class="dropdown-item">
        <i class="fas fa-file-code"></i> Export as JSON
    </a>
    <a href="/api/export/orders?format=pdf&userId=<%= userId %>&<%= new URLSearchParams(query).toString() %>" class="dropdown-item">
        <i class="fas fa-file-pdf"></i> Export as PDF
    </a>
</div>

<script>
        // Dropdown functionality
        function setupDropdown(buttonId, menuId) {
            const dropdownBtn = document.getElementById(buttonId);
            const dropdownMenu = document.getElementById(menuId);

            if (dropdownBtn && dropdownMenu) {
                dropdownBtn.addEventListener('click', (event) => {
                    event.stopPropagation();
                    // Hide other dropdowns
                    document.querySelectorAll('.dropdown-content.show').forEach(menu => {
                        if (menu.id !== menuId) {
                            menu.classList.remove('show');
                        }
                    });
                    dropdownMenu.classList.toggle('show');
                });
            }
        }

        setupDropdown('profileDropdown', 'profileMenu');

        // Hide dropdown when clicking outside
        window.addEventListener('click', (event) => {
            if (!event.target.closest('.dropdown')) {
                document.querySelectorAll('.dropdown-content.show').forEach(menu => {
                    menu.classList.remove('show');
                });
            }
        });

        // Theme toggle functionality
        const themeToggle = document.getElementById('theme-toggle');
        const html = document.documentElement;
        const savedTheme = localStorage.getItem('theme') || 'light';

        function applyTheme(theme) {
            html.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            
            // Update theme toggle icons
            const sunIcon = themeToggle.querySelector('.fa-sun');
            const moonIcon = themeToggle.querySelector('.fa-moon');
            
            if (theme === 'dark') {
                sunIcon.style.display = 'none';
                moonIcon.style.display = 'inline';
            } else {
                sunIcon.style.display = 'inline';
                moonIcon.style.display = 'none';
            }

            // Update charts theme
            updateChartThemes(theme);
        }

        function updateChartThemes(theme) {
            const textColor = theme === 'dark' ? '#f8fafc' : '#1e293b';
            const gridColor = theme === 'dark' ? 'rgba(148, 163, 184, 0.2)' : 'rgba(226, 232, 240, 1)';
            
            // Update existing charts if they exist
            if (window.statusChart) {
                window.statusChart.options.plugins.title.color = textColor;
                window.statusChart.options.plugins.legend.labels.color = textColor;
                window.statusChart.update();
            }
            
            if (window.businessChart) {
                window.businessChart.options.plugins.title.color = textColor;
                window.businessChart.options.scales.y.ticks.color = textColor;
                window.businessChart.options.scales.x.ticks.color = textColor;
                window.businessChart.options.scales.y.grid.color = gridColor;
                window.businessChart.options.scales.x.grid.color = gridColor;
                window.businessChart.update();
            }
            
            if (window.trendChart) {
                window.trendChart.options.plugins.title.color = textColor;
                window.trendChart.options.scales.y.ticks.color = textColor;
                window.trendChart.options.scales.x.ticks.color = textColor;
                window.trendChart.options.scales.y.grid.color = gridColor;
                window.trendChart.options.scales.x.grid.color = gridColor;
                window.trendChart.update();
            }
        }

        themeToggle.addEventListener('click', () => {
            const newTheme = html.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
            applyTheme(newTheme);
        });

        // Modal functionality
        function openModal(modalId) { document.getElementById(modalId).classList.add('show'); }
        function closeModal(modalId) { document.getElementById(modalId).classList.remove('show'); }

        // Profile dropdown functionality
        const profileDropdown = document.getElementById('profileDropdown');
        const profileMenu = document.getElementById('profileMenu');
        const dropdownParent = profileDropdown.closest('.dropdown');
        profileDropdown.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdownParent.classList.toggle('active');
        });
        document.addEventListener('click', (e) => {
            if (!profileMenu.contains(e.target) && !profileDropdown.contains(e.target)) {
                dropdownParent.classList.remove('active');
            }
        });

        // Enhanced view order function
        async function viewOrder(orderId) {
            const modalBody = document.getElementById('orderModalBody');
            modalBody.innerHTML = '<p>Loading order details...</p>';
            openModal('orderModal');
            try {
                const response = await fetch(`/api/orders/${orderId}?userId=<%= userId %>`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
      const order = await response.json();
      
                let itemsHtml = 'No items listed.';
                if (order.items) {
                    // Handle items whether it's a JSON string or array
                    let items = order.items;
                    if (typeof items === 'string') {
                        try {
                            items = JSON.parse(items);
                        } catch (e) {
                            items = [];
                        }
                    }
                    
                    if (Array.isArray(items) && items.length > 0) {
                        itemsHtml = `<ul>${items.map(item => `<li>${item.name || item.item_name || 'Unknown Item'} (x${item.quantity || 1}) - $${item.price || 'N/A'}</li>`).join('')}</ul>`;
                    }
                }

                modalBody.innerHTML = `
                    <div class="order-details">
                    <h4>Order ID: ${order.order_id}</h4>
                        <p><strong>Business:</strong> ${order.business_name || 'N/A'}</p>
                        <p><strong>Customer Name:</strong> ${order.customer_name || 'N/A'}</p>
                        <p><strong>Customer Phone:</strong> ${order.customer_phone || 'N/A'}</p>
                        <p><strong>Delivery Address:</strong> ${order.address || 'N/A'}</p>
                    <p><strong>Status:</strong> <span class="status-badge ${order.status}">${order.status}</span></p>
                        <p><strong>Delivery Date:</strong> ${order.delivery_date ? new Date(order.delivery_date).toLocaleDateString() : 'Not set'}</p>
                        <p><strong>Delivery Person:</strong> ${order.delivery_person || 'Not assigned'}</p>
                    <hr>
                    <h5>Items</h5>
                    ${itemsHtml}
                    <hr>
                        ${order.notes ? `<p><strong>Notes:</strong> ${order.notes}</p><hr>` : ''}
                    <p><strong>Created:</strong> ${new Date(order.created_at).toLocaleString()}</p>
                        ${order.updated_at ? `<p><strong>Last Updated:</strong> ${new Date(order.updated_at).toLocaleString()}</p>` : ''}
                        ${order.updated_by ? `<p><strong>Updated By:</strong> ${order.updated_by}</p>` : ''}
                        <div class="btn-group" style="margin-top: 1rem;">
                            <button class="btn btn-primary" onclick="editOrder('${orderId}')">Edit Order</button>
                            <button class="btn btn-secondary" onclick="closeModal('orderModal')">Close</button>
                        </div>
                    </div>
                `;
    } catch (error) {
                console.error('Error loading order:', error);
                modalBody.innerHTML = `<p style="color: var(--danger-color)">Failed to load order details: ${error.message}</p>`;
            }
        }

        // Complete edit order function
        async function editOrder(orderId) {
            const modalBody = document.getElementById('orderModalBody');
            modalBody.innerHTML = '<p>Loading order for editing...</p>';
            openModal('orderModal');
            
            try {
                const response = await fetch(`/api/orders/${orderId}?userId=<%= userId %>`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                const order = await response.json();
                
                // Parse items if it's a JSON string
                let items = order.items;
                if (typeof items === 'string') {
                    try {
                        items = JSON.parse(items);
                    } catch (e) {
                        items = [];
                    }
                }
                if (!Array.isArray(items)) {
                    items = [];
                }

                modalBody.innerHTML = `
                    <div class="order-edit">
                        <h4>Edit Order: ${order.order_id}</h4>
                        <form id="editOrderForm" onsubmit="saveOrderChanges(event, '${orderId}')">
                            <div class="form-group">
                                <label class="form-label">Customer Name</label>
                                <input type="text" class="form-input" name="customer_name" value="${order.customer_name || ''}" required>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Customer Phone</label>
                                <input type="tel" class="form-input" name="customer_phone" value="${order.customer_phone || ''}" required>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Delivery Address</label>
                                <textarea class="form-textarea" name="address" rows="3" required>${order.address || ''}</textarea>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Status</label>
                                <select class="form-select" name="status" required>
                                    <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Pending</option>
                                    <option value="processing" ${order.status === 'processing' ? 'selected' : ''}>Processing</option>
                                    <option value="delivered" ${order.status === 'delivered' ? 'selected' : ''}>Delivered</option>
                                    <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>Cancelled</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Delivery Date</label>
                                <input type="date" class="form-input" name="delivery_date" value="${order.delivery_date || ''}">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Delivery Person</label>
                                <input type="text" class="form-input" name="delivery_person" value="${order.delivery_person || ''}">
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Items</label>
                                <textarea class="form-textarea" name="items" rows="4" placeholder="Enter items as JSON format or plain text">${order.items || ''}</textarea>
                                <small style="color: var(--text-muted); font-size: 0.75rem; margin-top: 0.25rem; display: block;">
                                    Enter items as JSON format (e.g., [{"name":"Item 1","quantity":2,"price":10.99}]) or plain text
                                </small>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Notes</label>
                                <textarea class="form-textarea" name="notes" rows="3">${order.notes || ''}</textarea>
                            </div>
                            
                            <div class="btn-group" style="margin-top: 1rem;">
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                                <button type="button" class="btn btn-secondary" onclick="viewOrder('${orderId}')">Cancel</button>
                            </div>
                        </form>
                    </div>
                `;
            } catch (error) {
                console.error('Error loading order for editing:', error);
                modalBody.innerHTML = `<p style="color: var(--danger-color)">Failed to load order for editing: ${error.message}</p>`;
            }
        }

        // Save order changes
        async function saveOrderChanges(event, orderId) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);

            const updateData = {
                customer_name: formData.get('customer_name'),
                customer_phone: formData.get('customer_phone'),
                address: formData.get('address'),
                status: formData.get('status'),
                delivery_date: formData.get('delivery_date') || null,
                delivery_person: formData.get('delivery_person') || null,
                notes: formData.get('notes') || null,
                items: formData.get('items'),
                updated_by: '<%= userId %>',
                userId: '<%= userId %>'
            };

            try {
                const response = await fetch(`/api/orders/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData)
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                
                // Show success message and reload the page to reflect changes
                const modalBody = document.getElementById('orderModalBody');
                modalBody.innerHTML = `
                    <div class="order-success">
                        <h4>✅ Order Updated Successfully!</h4>
                        <p>Order ${orderId} has been updated.</p>
                        <div class="btn-group" style="margin-top: 1rem;">
                            <button class="btn btn-primary" onclick="window.location.reload()">Refresh Page</button>
                            <button class="btn btn-secondary" onclick="closeModal('orderModal')">Close</button>
                        </div>
                    </div>
                `;
            } catch (error) {
                console.error('Error updating order:', error);
                const modalBody = document.getElementById('orderModalBody');
                modalBody.innerHTML = `
                    <div class="order-error">
                        <h4>❌ Error Updating Order</h4>
                        <p style="color: var(--danger-color)">Failed to update order: ${error.message}</p>
                        <div class="btn-group" style="margin-top: 1rem;">
                            <button class="btn btn-primary" onclick="editOrder('${orderId}')">Try Again</button>
                            <button class="btn btn-secondary" onclick="closeModal('orderModal')">Close</button>
                        </div>
                    </div>
                `;
            }
        }

        // Export dropdown functionality
        const exportDropdown = document.getElementById('exportDropdown');
        const exportMenu = document.getElementById('exportMenu');

        exportDropdown.addEventListener('click', (e) => {
            e.stopPropagation();
            const rect = exportDropdown.getBoundingClientRect();
            exportMenu.style.display = 'block';
            exportMenu.style.position = 'fixed';
            exportMenu.style.left = rect.left + 'px';
            exportMenu.style.top = (rect.bottom + 4) + 'px';
            exportMenu.style.zIndex = 9999;
        });

        document.addEventListener('click', (e) => {
            if (!exportMenu.contains(e.target) && e.target !== exportDropdown) {
                exportMenu.style.display = 'none';
            }
        });

        window.addEventListener('resize', () => {
            exportMenu.style.display = 'none';
        });

        // Scroll reveal functionality
        function initScrollReveal() {
            const scrollRevealElements = document.querySelectorAll('.scroll-reveal');
            
            // If no elements found, nothing to do
            if (scrollRevealElements.length === 0) return;
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            });
            
            scrollRevealElements.forEach(element => {
                observer.observe(element);
            });
            
            // Fallback: If IntersectionObserver is not supported, make all elements visible
            if (!window.IntersectionObserver) {
                scrollRevealElements.forEach(element => {
                    element.classList.add('visible');
                });
            }
        }

        // Parse chart data from backend
        const chartData = <%- JSON.stringify(chartData) %>;
        // Prepare status chart data
        const statusLabels = ['pending', 'processing', 'delivered', 'cancelled'];
        const statusCountsMap = {};
        (chartData.statusCounts || []).forEach(row => { statusCountsMap[row.status] = Number(row.count); });
        const statusData = statusLabels.map(label => statusCountsMap[label] || 0);
        // Prepare business chart data (always all businesses)
        const businessLabels = (chartData.ordersByBusiness || []).map(row => row.business_name);
        const businessData = (chartData.ordersByBusiness || []).map(row => Number(row.count));
        // Prepare trend chart data (filtered)
        const trendLabels = (chartData.recentTrends || []).map(row => row.date);
        const trendData = (chartData.recentTrends || []).map(row => Number(row.count));

        // Chart initialization
        function initCharts() {
            // Status Distribution Chart
            const statusCtx = document.getElementById('statusChart');
            if (statusCtx) {
                window.statusChart = new Chart(statusCtx, {
                    type: 'doughnut',
                    data: {
                        labels: statusLabels.map(l => l.charAt(0).toUpperCase() + l.slice(1)),
                        datasets: [{
                            data: statusData,
                            backgroundColor: [
                                'rgba(245, 158, 11, 0.8)',
                                'rgba(59, 130, 246, 0.8)',
                                'rgba(16, 185, 129, 0.8)',
                                'rgba(239, 68, 68, 0.8)'
                            ],
                            borderColor: [
                                'rgba(245, 158, 11, 1)',
                                'rgba(59, 130, 246, 1)',
                                'rgba(16, 185, 129, 1)',
                                'rgba(239, 68, 68, 1)'
                            ],
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                                    padding: 20,
                                    usePointStyle: true
                                }
                            },
                            title: {
                                display: true,
                                text: 'Order Status Distribution',
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                                font: {
                                    size: 16,
                                    weight: 'bold'
                                }
                            }
                        }
                    }
                });
            }

            // Business Performance Chart (not filtered)
            const businessCtx = document.getElementById('businessChart');
            if (businessCtx) {
                window.businessChart = new Chart(businessCtx, {
                    type: 'bar',
                    data: {
                        labels: businessLabels,
                        datasets: [{
                            label: 'Orders',
                            data: businessData,
                            backgroundColor: 'rgba(16, 185, 129, 0.8)',
                            borderColor: 'rgba(16, 185, 129, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: {
                                display: true,
                                text: 'Orders by Business',
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                                font: { size: 16, weight: 'bold' }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary') },
                                grid: { color: getComputedStyle(document.documentElement).getPropertyValue('--border-color') }
                            },
                            x: {
                                ticks: { color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary') },
                                grid: { color: getComputedStyle(document.documentElement).getPropertyValue('--border-color') }
                            }
                        }
                    }
                });
            }

            // Trend Chart
            const trendCtx = document.getElementById('trendChart');
            if (trendCtx) {
                window.trendChart = new Chart(trendCtx, {
                    type: 'line',
                    data: {
                        labels: trendLabels,
                        datasets: [{
                            label: 'Orders',
                            data: trendData,
                            borderColor: 'rgba(16, 185, 129, 1)',
                            backgroundColor: 'rgba(16, 185, 129, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: {
                                display: true,
                                text: 'Order Trends (Last 7 Days)',
                                color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                                font: { size: 16, weight: 'bold' }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary') },
                                grid: { color: getComputedStyle(document.documentElement).getPropertyValue('--border-color') }
                            },
                            x: {
                                ticks: { color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary') },
                                grid: { color: getComputedStyle(document.documentElement).getPropertyValue('--border-color') }
                            }
                        }
                    }
                });
            }
        }

        // Initialize charts when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            initScrollReveal();
            initCharts();
            applyTheme(savedTheme);
            // Also make elements visible immediately if they're already in viewport
            setTimeout(() => {
                const scrollRevealElements = document.querySelectorAll('.scroll-reveal:not(.visible)');
                scrollRevealElements.forEach(element => {
                    const rect = element.getBoundingClientRect();
                    if (rect.top < window.innerHeight && rect.bottom > 0) {
                        element.classList.add('visible');
                    }
                });
            }, 100);
        });

        // Fallback: If DOMContentLoaded doesn't fire, try on window load
        window.addEventListener('load', function() {
            const scrollRevealElements = document.querySelectorAll('.scroll-reveal:not(.visible)');
            if (scrollRevealElements.length > 0) {
                // If elements are still not visible, make them visible as a last resort
                scrollRevealElements.forEach(element => {
                    element.classList.add('visible');
                });
            }
        });
</script>
</body>
</html> 