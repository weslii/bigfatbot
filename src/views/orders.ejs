<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders Management - WhatsApp Delivery Bot</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/orders-dashboard.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <div class="header-left">
                <a href="/dashboard" class="logo-section">
                    <div class="logo-icon">
                        <i class="fab fa-whatsapp"></i>
                    </div>
                    <span class="logo-text main-title">Delivery Bot</span>
                </a>
            </div>
            <div class="header-center">
                <a href="/dashboard" class="nav-link">Dashboard</a>
                <a href="/orders" class="nav-link active">Orders</a>
                <a href="/groups" class="nav-link">Groups</a>
                <a href="/businesses" class="nav-link">Businesses</a>
            </div>
            <div class="header-right">
                <button class="btn btn-icon" id="themeToggle">
                    <i class="fas fa-moon"></i>
                </button>
                <div class="dropdown">
                    <button class="btn btn-icon" id="profileDropdown">
                        <i class="fas fa-user"></i>
                    </button>
                    <div class="dropdown-content" id="profileMenu">
                        <a href="/settings" class="dropdown-item"><i class="fas fa-cog"></i> Settings</a>
                        <a href="/logout" class="dropdown-item"><i class="fas fa-sign-out-alt"></i> Logout</a>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main class="main-content">
        <!-- Page Header -->
        <div class="page-header scroll-reveal">
            <div>
                <h1 class="page-title">Orders Overview</h1>
                <p class="page-subtitle">Manage and track all your business orders</p>
            </div>
            <div class="header-actions-right">
                <div class="dropdown">
                    <button class="btn btn-secondary" id="exportDropdown">
                        <i class="fas fa-download"></i> Export
                    </button>
                    <div class="dropdown-content" id="exportMenu">
                        <a href="/api/export/orders?format=csv&userId=<%= userId %>&<%= new URLSearchParams(query).toString() %>" class="dropdown-item">
                            <i class="fas fa-file-csv"></i> as CSV
                        </a>
                        <a href="/api/export/orders?format=json&userId=<%= userId %>&<%= new URLSearchParams(query).toString() %>" class="dropdown-item">
                            <i class="fas fa-file-code"></i> as JSON
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Analytics Charts -->
        <div class="charts-grid">
            <div class="chart-card scroll-reveal">
                <div class="chart-container">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
            <div class="chart-card scroll-reveal">
                <div class="chart-container">
                    <canvas id="businessChart"></canvas>
                </div>
            </div>
        </div>
        <div class="content-card scroll-reveal">
             <div class="card-content chart-container" style="min-height: 250px;">
                <canvas id="trendChart"></canvas>
            </div>
        </div>
        
        <!-- Filters -->
        <div class="content-card scroll-reveal">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-filter"></i> Filters
                </h3>
            </div>
            <div class="card-content">
                <form class="filters-form" id="filtersForm">
                    <input type="hidden" name="userId" value="<%= userId %>">
                    
                    <div class="form-group">
                        <label class="form-label" for="businessFilter">Business</label>
                        <select class="form-select" name="business" id="businessFilter">
                            <option value="">All Businesses</option>
                            <% businesses.forEach(function(biz) { %>
                                <option value="<%= biz.business_id %>" <%= selectedBusiness == biz.business_id ? 'selected' : '' %>>
                                    <%= biz.business_name %>
                                </option>
                            <% }); %>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="statusFilter">Status</label>
                        <select class="form-select" name="status" id="statusFilter">
                            <option value="">All Statuses</option>
                            <option value="pending" <%= selectedStatus == 'pending' ? 'selected' : '' %>>Pending</option>
                            <option value="processing" <%= selectedStatus == 'processing' ? 'selected' : '' %>>Processing</option>
                            <option value="delivered" <%= selectedStatus == 'delivered' ? 'selected' : '' %>>Delivered</option>
                            <option value="cancelled" <%= selectedStatus == 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="searchFilter">Search</label>
                        <input type="text" class="form-input" name="search" id="searchFilter"
                               placeholder="Customer name or order ID" value="<%= search || '' %>">
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search"></i> Apply
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Orders Table -->
        <div class="content-card scroll-reveal">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="fas fa-box"></i> Orders (<%= totalOrders %>)
                </h3>
                <div class="header-actions-right">
                    <form id="pageSizeForm" class="d-flex align-items-center">
                        <select class="form-select" style="width: auto;" name="pageSize" onchange="document.getElementById('pageSizeForm').submit()">
                            <option value="10" <%= pageSize == 10 ? 'selected' : '' %>>10 per page</option>
                            <option value="25" <%= pageSize == 25 ? 'selected' : '' %>>25 per page</option>
                            <option value="50" <%= pageSize == 50 ? 'selected' : '' %>>50 per page</option>
                        </select>
                        <% for(let key in query) { %>
                            <% if (key !== 'pageSize' && key !== 'page') { %>
                                <input type="hidden" name="<%= key %>" value="<%= query[key] %>">
                            <% } %>
                        <% } %>
                    </form>
                </div>
            </div>
            <div class="card-content">
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Business</th>
                                <th>Customer</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (orders && orders.length) { %>
                                <% orders.forEach(function(order) { %>
                                    <tr>
                                        <td><strong><%= order.order_id %></strong></td>
                                        <td><span class="business-badge"><%= order.business_name %></span></td>
                                        <td><%= order.customer_name %></td>
                                        <td>
                                            <span class="status-badge <%= order.status %>"><%= order.status %></span>
                                        </td>
                                        <td><%= new Date(order.created_at).toLocaleDateString() %></td>
                                        <td>
                                            <div class="btn-group">
                                                <button class="btn btn-sm btn-outline" onclick="viewOrder('<%= order.id %>')">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline" onclick="editOrder('<%= order.id %>')">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="6" class="no-orders">
                                        <i class="fas fa-box-open"></i>
                                        <p>No orders found matching your criteria.</p>
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
                 <!-- Pagination -->
                <% if (totalPages > 1) { %>
                    <div class="pagination">
                        <div class="pagination-info">
                            Showing <%= (page - 1) * pageSize + 1 %> to <%= Math.min(page * pageSize, totalOrders) %> of <%= totalOrders %> orders
                        </div>
                        <nav class="pagination-nav">
                            <a href="?<%= new URLSearchParams({ ...query, page: page - 1 }).toString() %>" 
                               class="pagination-btn <%= page <= 1 ? 'disabled' : '' %>">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                            <% 
                                const maxPagesToShow = 5;
                                let startPage = Math.max(1, page - Math.floor(maxPagesToShow / 2));
                                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
                                if (endPage - startPage + 1 < maxPagesToShow) {
                                  startPage = Math.max(1, endPage - maxPagesToShow + 1);
                                }
                            %>
                            <% if (startPage > 1) { %>
                                <a href="?<%= new URLSearchParams({ ...query, page: 1 }).toString() %>" class="pagination-btn">1</a>
                                <% if (startPage > 2) { %><span class="pagination-btn disabled">...</span><% } %>
                            <% } %>
                            
                            <% for(let i = startPage; i <= endPage; i++) { %>
                                <a href="?<%= new URLSearchParams({ ...query, page: i }).toString() %>" 
                                   class="pagination-btn <%= i === page ? 'active' : '' %>"><%= i %></a>
                            <% } %>
                            
                            <% if (endPage < totalPages) { %>
                                <% if (endPage < totalPages - 1) { %><span class="pagination-btn disabled">...</span><% } %>
                                <a href="?<%= new URLSearchParams({ ...query, page: totalPages }).toString() %>" class="pagination-btn"><%= totalPages %></a>
                            <% } %>
                            <a href="?<%= new URLSearchParams({ ...query, page: page + 1 }).toString() %>" 
                               class="pagination-btn <%= page >= totalPages ? 'disabled' : '' %>">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </nav>
                    </div>
                <% } %>
            </div>
        </div>
    </main>

    <!-- Order Details Modal -->
    <div id="orderModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Order Details</h3>
                <button class="close-modal" onclick="closeModal('orderModal')">&times;</button>
            </div>
            <div class="modal-body" id="orderModalBody">
                <!-- Order details will be loaded here -->
            </div>
        </div>
    </div>
    
    <script>
        // Dropdown functionality
        function setupDropdown(buttonId, menuId) {
            const button = document.getElementById(buttonId);
            const menu = document.getElementById(menuId);
            if(button && menu) {
                button.addEventListener('click', (e) => {
                    e.stopPropagation();
                    menu.classList.toggle('show');
                });
            }
        }
        setupDropdown('exportDropdown', 'exportMenu');
        setupDropdown('profileDropdown', 'profileMenu');

        document.addEventListener('click', () => {
            document.querySelectorAll('.dropdown-content.show').forEach(menu => {
                menu.classList.remove('show');
            });
        });

        // Theme toggle
        const themeToggle = document.getElementById('themeToggle');
        const html = document.documentElement;
        const savedTheme = localStorage.getItem('theme') || 'light';
        
        function applyTheme(theme) {
            html.setAttribute('data-theme', theme);
            themeToggle.querySelector('i').className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
            localStorage.setItem('theme', theme);
            if (window.charts) {
                Object.values(window.charts).forEach(chart => {
                    updateChartTheme(chart, theme);
                });
            }
        }

        themeToggle.addEventListener('click', () => {
            const newTheme = html.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
            applyTheme(newTheme);
        });

        // Modal functionality
        function openModal(modalId) { document.getElementById(modalId).classList.add('show'); }
        function closeModal(modalId) { document.getElementById(modalId).classList.remove('show'); }

        async function viewOrder(orderId) {
            const modalBody = document.getElementById('orderModalBody');
            modalBody.innerHTML = '<p>Loading order details...</p>';
            openModal('orderModal');
            try {
                const response = await fetch(`/api/orders/${orderId}?userId=<%= userId %>`);
                if (!response.ok) throw new Error('Failed to fetch');
                const order = await response.json();
                
                let itemsHtml = 'No items listed.';
                if (order.items && order.items.length) {
                    itemsHtml = `<ul>${order.items.map(item => `<li>${item.name} (x${item.quantity}) - $${item.price}</li>`).join('')}</ul>`;
                }

                modalBody.innerHTML = `
                    <h4>Order ID: ${order.order_id}</h4>
                    <p><strong>Business:</strong> ${order.business_name}</p>
                    <p><strong>Customer:</strong> ${order.customer_name}</p>
                    <p><strong>Status:</strong> <span class="status-badge ${order.status}">${order.status}</span></p>
                    <hr>
                    <h5>Items</h5>
                    ${itemsHtml}
                    <hr>
                    <p><strong>Total Price:</strong> $${order.total_price}</p>
                    <p><strong>Created:</strong> ${new Date(order.created_at).toLocaleString()}</p>
                `;
            } catch (error) {
                modalBody.innerHTML = '<p style="color: var(--danger-color)">Failed to load order details.</p>';
            }
        }

        function editOrder(orderId) {
            // Redirect to a future edit page or open a more complex modal
            alert('Edit functionality coming soon for order: ' + orderId);
        }

        // Scroll Reveal Animation
        document.addEventListener('DOMContentLoaded', () => {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll('.scroll-reveal').forEach(el => {
                observer.observe(el);
            });

             // Charting
            const chartData = <%- JSON.stringify(chartData || {}) %>;
            window.charts = {};

            const isDark = savedTheme === 'dark';
            const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
            const textColor = isDark ? '#f8fafc' : '#475569';

            // 1. Status Distribution Chart
            const statusCtx = document.getElementById('statusChart');
            if (statusCtx && chartData.statusCounts) {
                window.charts.status = new Chart(statusCtx, {
                    type: 'doughnut',
                    data: {
                        labels: chartData.statusCounts.map(s => s.status),
                        datasets: [{
                            label: 'Order Status',
                            data: chartData.statusCounts.map(s => s.count),
                            backgroundColor: ['#f59e0b', '#3b82f6', '#10b981', '#ef4444'],
                            borderColor: isDark ? '#1e293b' : '#ffffff',
                            borderWidth: 4,
                        }]
                    },
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: {
                            legend: { position: 'right', labels: { color: textColor } },
                            title: { display: true, text: 'Order Status Distribution', color: textColor, font: { size: 16 } }
                        }
                    }
                });
            }

            // 2. Orders by Business Chart
            const businessCtx = document.getElementById('businessChart');
            if (businessCtx && chartData.ordersByBusiness) {
                window.charts.business = new Chart(businessCtx, {
                    type: 'bar',
                    data: {
                        labels: chartData.ordersByBusiness.map(b => b.business_name),
                        datasets: [{
                            label: '# of Orders',
                            data: chartData.ordersByBusiness.map(b => b.count),
                            backgroundColor: 'rgba(79, 70, 229, 0.8)',
                            borderColor: 'rgba(79, 70, 229, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: { display: true, text: 'Orders per Business', color: textColor, font: { size: 16 } }
                        },
                        scales: { 
                            y: { beginAtZero: true, grid: { color: gridColor }, ticks: { color: textColor } },
                            x: { grid: { display: false }, ticks: { color: textColor } }
                        }
                    }
                });
            }

            // 3. Recent Order Trends Chart
            const trendCtx = document.getElementById('trendChart');
            if (trendCtx && chartData.recentTrends) {
                const trendData = chartData.recentTrends.map(t => ({ x: new Date(t.date), y: t.count }));
                window.charts.trends = new Chart(trendCtx, {
                    type: 'line',
                    data: {
                        datasets: [{
                            label: 'Orders',
                            data: trendData,
                            borderColor: '#10b981',
                            backgroundColor: 'rgba(16, 185, 129, 0.2)',
                            tension: 0.3,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            title: { display: true, text: 'Orders in Last 7 Days', color: textColor, font: { size: 16 } }
                        },
                        scales: { 
                            y: { beginAtZero: true, grid: { color: gridColor }, ticks: { color: textColor } },
                            x: { type: 'time', time: { unit: 'day', tooltipFormat: 'MMM d' }, grid: { display: false }, ticks: { color: textColor } }
                        }
                    }
                });
            }

            // Initial theme setup
            applyTheme(savedTheme);
        });

        function updateChartTheme(chart, theme) {
            const isDark = theme === 'dark';
            const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
            const textColor = isDark ? '#f8fafc' : '#475569';

            chart.options.plugins.legend.labels.color = textColor;
            chart.options.plugins.title.color = textColor;

            if (chart.options.scales) {
                if (chart.options.scales.y) {
                    chart.options.scales.y.grid.color = gridColor;
                    chart.options.scales.y.ticks.color = textColor;
                }
                if (chart.options.scales.x) {
                    chart.options.scales.x.ticks.color = textColor;
                    if(chart.options.scales.x.grid) {
                        chart.options.scales.x.grid.color = gridColor;
                    }
                }
            }
             if (chart.config.type === 'doughnut') {
                chart.data.datasets[0].borderColor = isDark ? '#1e293b' : '#ffffff';
            }
            chart.update();
        }
    </script>
</body>
</html> 